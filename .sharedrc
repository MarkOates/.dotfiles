# This will be a shared location aliases that are shared
# between .zshrc and .bashrc

# see Stack Overflow "include-additional-files-in-bashrc"



CURRENT_BG_COLOR="\033[48;5;019m"
CURRENT_FG_COLOR="\033[38;5;158m"



TERMINAL_COLOR=$CURRENT_BG_COLOR$CURRENT_FG_COLOR





COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_BLUE="\033[0;34m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"



function git_color {
  local git_status="$(git status 2> /dev/null)"

  if [[ ! $git_status =~ "working directory clean" ]]; then
    echo -e $COLOR_GREEN
  elif [[ $git_status =~ "Your branch is ahead of" ]]; then
    echo -e $COLOR_RED
  elif [[ $git_status =~ "nothing to commit" ]]; then
    echo -e $COLOR_YELLOW
  else
    echo -e $COLOR_OCHRE
  fi
}


function git_branch {
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"

  if [[ $git_status =~ $on_branch ]]; then
    local branch=${BASH_REMATCH[1]}
    echo "$branch"
  elif [[ $git_status =~ $on_commit ]]; then
    local commit=${BASH_REMATCH[1]}
    echo "$commit"
  fi
}




BGCOLOR_OCHRE="\033[48;5;95m"

USER_COLOR=$TERMINAL_COLOR
FOLDER_COLOR=$TERMINAL_COLOR
GIT_COLOR=git_color
COLOR_PROMPT=$TERMINAL_COLOR




#PS1="\[$COLOR_WHITE\]\n[\W]"          # basename of pwd
#PS1+="\[\$(git_color)\]"        # colors git status
#PS1+="\$(git_branch)"           # prints current branch
#PS1+="\[$COLOR_BLUE\]\$\[$COLOR_RESET\] "   # '#' for root, else '$'
#export PS1


PS1="\n\[$USER_COLOR\] \u ⏵ \[$FOLDER_COLOR\]\w ⏵ \$(GIT_COLOR)\$(git_branch) ⏵ \[$COLOR_PROMPT\]\[$COLOR_RESET\]$ "


#source /usr/share/git/completion/git-prompt.sh

## Change the prompt in Mintty to show git status
## Define the Git status symbols
#GIT_PROMPT_CHANGED_SYMBOL="✚"
#GIT_PROMPT_STAGED_SYMBOL="✭"
#GIT_PROMPT_UNTRACKED_SYMBOL="…"
#GIT_PROMPT_STASHED_SYMBOL="⚑"
#GIT_PROMPT_CLEAN_SYMBOL="✔"

## Define the prompt format string
#PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " \[\033[01;33m\](%s${GIT_PROMPT_CHANGED_SYMBOL}${GIT_PROMPT_STAGED_SYMBOL}${GIT_PROMPT_UNTRACKED_SYMBOL}${GIT_PROMPT_STASHED_SYMBOL}${GIT_PROMPT_CLEAN_SYMBOL}\[\033[01;33m\])")\$ '




# get current branch in git repo
#function parse_git_branch() {
	#BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	#if [ ! "${BRANCH}" == "" ]
	#then
		#STAT=`parse_git_dirty`
		#echo "[${BRANCH}${STAT}]"
	#else
		#echo ""
	#fi
#}

## get current status of git repo
#function parse_git_dirty {
	#status=`git status 2>&1 | tee`
	#dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	#untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	#ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	#newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	#renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	#deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	#bits=''
	#if [ "${renamed}" == "0" ]; then
		#bits=">${bits}"
	#fi
	#if [ "${ahead}" == "0" ]; then
		#bits="*${bits}"
	#fi
	#if [ "${newfile}" == "0" ]; then
		#bits="+${bits}"
	#fi
	#if [ "${untracked}" == "0" ]; then
		#bits="?${bits}"
	#fi
	#if [ "${deleted}" == "0" ]; then
		#bits="x${bits}"
	#fi
	#if [ "${dirty}" == "0" ]; then
		#bits="!${bits}"
	#fi
	#if [ ! "${bits}" == "" ]; then
		#echo " ${bits}"
	#else
		#echo ""
	#fi
#}

#function nonzero_return() {
	#RETVAL=$?
	#[ $RETVAL -ne 0 ] && echo "$RETVAL"
#}

#export PS1="\[\e[36;44m\]\`nonzero_return\`\[\e[m\]\[\e[36;44m\] \[\e[m\]\[\e[36;44m\]>\[\e[m\]\[\e[36;44m\]\u\[\e[m\]\[\e[36;44m\]>\[\e[m\]\[\e[36;44m\] \[\e[m\]\[\e[36;44m\]\W\[\e[m\]\[\e[36;44m\] \[\e[m\]\[\e[36;44m\]>\[\e[m\]\[\e[36;44m\]\`parse_git_branch\`\[\e[m\]\[\e[36;44m\]\\$\[\e[m\] "

